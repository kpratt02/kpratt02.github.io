{"title":"R style suggestions","markdown":{"yaml":{"title":"R style suggestions"},"headingText":"R style conventions","containsRefs":false,"markdown":"\n\n\nR is fairly forgiving about how you type code (unlike other languages like Python, where miscounting spaces can ruin your code!). All of these things will do exactly the same thing:\n\n```{r eval=FALSE, tidy=FALSE}\nmpg %>% \n  filter(cty > 10, class == \"compact\")\n\nmpg %>% filter(cty > 10, class == \"compact\")\n\nmpg %>% \n  filter(cty > 10, \n         class == \"compact\")\n\nmpg %>% filter(cty>10, class==\"compact\")\n\nfilter(mpg,cty>10,class==\"compact\")\n\nmpg %>% \nfilter(cty > 10, \n                        class == \"compact\")\n\nfilter ( mpg,cty>10,     class==\"compact\" )\n```\n\nBut you'll notice that only a few of those iterations (the first three) are easily readable.\n\nTo help improve readability and make it easier to share code with others, there's [an unofficial style guide for writing R code](https://style.tidyverse.org/index.html). It's fairly short and just has lots of examples of good and bad ways of writing code (naming variables, dealing with long lines, using proper indentation levels, etc.)—you should glance through it some time.\n\nRStudio has a built-in way of cleaning up your code. Select some code, press <kbd>ctrl</kbd> + <kbd>i</kbd> (on Windows) or <kbd>⌘</kbd> + <kbd>i</kbd> (on macOS), and R will reformat the code for you. It's not always perfect, but it's really helpful for getting indentation right without having to manually hit <kbd>space</kbd> a billion times.\n\n## Main style things to pay attention to for this class\n\n> *Important note*: I won't ever grade you on any of this! If you submit something like `filter(mpg,cty>10,class==\"compact\")`, I might recommend adding spaces, but it won't affect your grade or points or anything.\n\n### Spacing\n\n> See the [\"Spacing\" section](https://style.tidyverse.org/syntax.html#spacing) in the tidyverse style guide.\n\nPut spaces after commas (like in regular English):\n\n```{r eval=FALSE}\n# Good\nfilter(mpg, cty > 10)\n\n# Bad\nfilter(mpg , cty > 10)\nfilter(mpg ,cty > 10)\nfilter(mpg,cty > 10)\n```\n\nPut spaces around operators like `+`, `-`, `>`, `=`, etc.:\n\n```{r eval=FALSE}\n# Good\nfilter(mpg, cty > 10)\n\n# Bad\nfilter(mpg, cty>10)\nfilter(mpg, cty> 10)\nfilter(mpg, cty >10)\n```\n\nDon't put spaces around parentheses that are parts of functions:\n\n```{r eval=FALSE}\n# Good\nfilter(mpg, cty > 10)\n\n# Bad\nfilter (mpg, cty > 10)\nfilter ( mpg, cty > 10)\nfilter( mpg, cty > 10 )\n```\n\n### Long lines\n\n> See the [\"Long lines\" section](https://style.tidyverse.org/syntax.html#long-lines) in the tidyverse style guide.\n\nIt's generally good practice to not have really long lines of code. A good suggestion is to keep lines at a maximum of 80 characters. Instead of counting characters by hand (ew), in RStudio go to \"Tools\" > \"Global Options\" > \"Code\" > \"Display\" and check the box for \"Show margin\". You should now see a really thin line indicating 80 characters. Again, you can go beyond this—that's fine. It's just good practice to avoid going too far past it.\n\nYou can add line breaks inside longer lines of code. Line breaks should come after commas, and things like function arguments should align within the function:\n\n```{r eval=FALSE}\n# Good\nfilter(mpg, cty > 10, class == \"compact\")\n\n# Good\nfilter(mpg, cty > 10, \n       class == \"compact\")\n\n# Good\nfilter(mpg,\n       cty > 10,\n       class == \"compact\")\n\n# Bad\nfilter(mpg, cty > 10, class %in% c(\"compact\", \"pickup\", \"midsize\", \"subcompact\", \"suv\", \"2seater\", \"minivan\"))\n\n# Good\nfilter(mpg, \n       cty > 10, \n       class %in% c(\"compact\", \"pickup\", \"midsize\", \"subcompact\", \n                    \"suv\", \"2seater\", \"minivan\"))\n```\n\n### Pipes (`%>%`) and ggplot layers (`+`)\n\nPut each layer of a ggplot plot on separate lines, with the `+` at the end of the line, indented with two spaces:\n\n```{r eval=FALSE}\n# Good\nggplot(mpg, aes(x = cty, y = hwy, color = class)) +\n  geom_point() +\n  geom_smooth() +\n  theme_bw()\n\n# Bad\nggplot(mpg, aes(x = cty, y = hwy, color = class)) +\n  geom_point() + geom_smooth() +\n  theme_bw()\n\n# Super bad\nggplot(mpg, aes(x = cty, y = hwy, color = class)) + geom_point() + geom_smooth() + theme_bw()\n\n# Super bad and won't even work\nggplot(mpg, aes(x = cty, y = hwy, color = class))\n  + geom_point()\n  + geom_smooth() \n  + theme_bw()\n```\n\nPut each step in a dplyr pipeline on separate lines, with the `%>%` at the end of the line, indented with two spaces:\n\n```{r eval=FALSE}\n# Good\nmpg %>% \n  filter(cty > 10) %>% \n  group_by(class) %>% \n  summarize(avg_hwy = mean(hwy))\n\n# Bad\nmpg %>% filter(cty > 10) %>% group_by(class) %>% \n  summarize(avg_hwy = mean(hwy))\n\n# Super bad\nmpg %>% filter(cty > 10) %>% group_by(class) %>% summarize(avg_hwy = mean(hwy))\n\n# Super bad and won't even work\nmpg %>% \n  filter(cty > 10)\n  %>% group_by(class)\n  %>% summarize(avg_hwy = mean(hwy))\n```\n\n### Comments\n\n> See the [\"Comments\" section](https://style.tidyverse.org/syntax.html#comments) in the tidyverse style guide.\n\nComments should start with a comment symbol and a single space: `# `\n\n```{r eval=FALSE}\n# Good\n\n#Bad\n\n    #Bad\n```\n\nIf the comment is really short (and won't cause you to go over 80 characters in the line), you can include it in the same line as the code, separated by at least two spaces (it works with one space, but using a couple can enhance readability):\n\n```{r eval=FALSE}\nmpg %>% \n  filter(cty > 10) %>%  # Only rows where cty is 10 +\n  group_by(class) %>%  # Divide into class groups\n  summarize(avg_hwy = mean(hwy))  # Find the average hwy in each group\n```\n\nYou can add extra spaces to get inline comments to align, if you want:\n\n```{r eval=FALSE}\nmpg %>% \n  filter(cty > 10) %>%            # Only rows where cty is 10 +\n  group_by(class) %>%             # Divide into class groups\n  summarize(avg_hwy = mean(hwy))  # Find the average hwy in each group\n```\n\nIf the comment is really long, you can break it into multiple lines. RStudio can do this for you if you go to \"Code\" > \"Reflow comment\"\n\n```{r eval=FALSE}\n# Good\n# Happy families are all alike; every unhappy family is unhappy in its own way.\n# Everything was in confusion in the Oblonskys’ house. The wife had discovered\n# that the husband was carrying on an intrigue with a French girl, who had been\n# a governess in their family, and she had announced to her husband that she\n# could not go on living in the same house with him. This position of affairs\n# had now lasted three days, and not only the husband and wife themselves, but\n# all the members of their family and household, were painfully conscious of it.\n\n# Bad\n# Happy families are all alike; every unhappy family is unhappy in its own way. Everything was in confusion in the Oblonskys’ house. The wife had discovered that the husband was carrying on an intrigue with a French girl, who had been a governess in their family, and she had announced to her husband that she could not go on living in the same house with him. This position of affairs had now lasted three days, and not only the husband and wife themselves, but all the members of their family and household, were painfully conscious of it.\n```\n\nThough, if you're dealing with comments that are *that* long, consider putting the text in R Markdown instead and having it be actual prose.\n","srcMarkdownNoYaml":"\n\n## R style conventions\n\nR is fairly forgiving about how you type code (unlike other languages like Python, where miscounting spaces can ruin your code!). All of these things will do exactly the same thing:\n\n```{r eval=FALSE, tidy=FALSE}\nmpg %>% \n  filter(cty > 10, class == \"compact\")\n\nmpg %>% filter(cty > 10, class == \"compact\")\n\nmpg %>% \n  filter(cty > 10, \n         class == \"compact\")\n\nmpg %>% filter(cty>10, class==\"compact\")\n\nfilter(mpg,cty>10,class==\"compact\")\n\nmpg %>% \nfilter(cty > 10, \n                        class == \"compact\")\n\nfilter ( mpg,cty>10,     class==\"compact\" )\n```\n\nBut you'll notice that only a few of those iterations (the first three) are easily readable.\n\nTo help improve readability and make it easier to share code with others, there's [an unofficial style guide for writing R code](https://style.tidyverse.org/index.html). It's fairly short and just has lots of examples of good and bad ways of writing code (naming variables, dealing with long lines, using proper indentation levels, etc.)—you should glance through it some time.\n\nRStudio has a built-in way of cleaning up your code. Select some code, press <kbd>ctrl</kbd> + <kbd>i</kbd> (on Windows) or <kbd>⌘</kbd> + <kbd>i</kbd> (on macOS), and R will reformat the code for you. It's not always perfect, but it's really helpful for getting indentation right without having to manually hit <kbd>space</kbd> a billion times.\n\n## Main style things to pay attention to for this class\n\n> *Important note*: I won't ever grade you on any of this! If you submit something like `filter(mpg,cty>10,class==\"compact\")`, I might recommend adding spaces, but it won't affect your grade or points or anything.\n\n### Spacing\n\n> See the [\"Spacing\" section](https://style.tidyverse.org/syntax.html#spacing) in the tidyverse style guide.\n\nPut spaces after commas (like in regular English):\n\n```{r eval=FALSE}\n# Good\nfilter(mpg, cty > 10)\n\n# Bad\nfilter(mpg , cty > 10)\nfilter(mpg ,cty > 10)\nfilter(mpg,cty > 10)\n```\n\nPut spaces around operators like `+`, `-`, `>`, `=`, etc.:\n\n```{r eval=FALSE}\n# Good\nfilter(mpg, cty > 10)\n\n# Bad\nfilter(mpg, cty>10)\nfilter(mpg, cty> 10)\nfilter(mpg, cty >10)\n```\n\nDon't put spaces around parentheses that are parts of functions:\n\n```{r eval=FALSE}\n# Good\nfilter(mpg, cty > 10)\n\n# Bad\nfilter (mpg, cty > 10)\nfilter ( mpg, cty > 10)\nfilter( mpg, cty > 10 )\n```\n\n### Long lines\n\n> See the [\"Long lines\" section](https://style.tidyverse.org/syntax.html#long-lines) in the tidyverse style guide.\n\nIt's generally good practice to not have really long lines of code. A good suggestion is to keep lines at a maximum of 80 characters. Instead of counting characters by hand (ew), in RStudio go to \"Tools\" > \"Global Options\" > \"Code\" > \"Display\" and check the box for \"Show margin\". You should now see a really thin line indicating 80 characters. Again, you can go beyond this—that's fine. It's just good practice to avoid going too far past it.\n\nYou can add line breaks inside longer lines of code. Line breaks should come after commas, and things like function arguments should align within the function:\n\n```{r eval=FALSE}\n# Good\nfilter(mpg, cty > 10, class == \"compact\")\n\n# Good\nfilter(mpg, cty > 10, \n       class == \"compact\")\n\n# Good\nfilter(mpg,\n       cty > 10,\n       class == \"compact\")\n\n# Bad\nfilter(mpg, cty > 10, class %in% c(\"compact\", \"pickup\", \"midsize\", \"subcompact\", \"suv\", \"2seater\", \"minivan\"))\n\n# Good\nfilter(mpg, \n       cty > 10, \n       class %in% c(\"compact\", \"pickup\", \"midsize\", \"subcompact\", \n                    \"suv\", \"2seater\", \"minivan\"))\n```\n\n### Pipes (`%>%`) and ggplot layers (`+`)\n\nPut each layer of a ggplot plot on separate lines, with the `+` at the end of the line, indented with two spaces:\n\n```{r eval=FALSE}\n# Good\nggplot(mpg, aes(x = cty, y = hwy, color = class)) +\n  geom_point() +\n  geom_smooth() +\n  theme_bw()\n\n# Bad\nggplot(mpg, aes(x = cty, y = hwy, color = class)) +\n  geom_point() + geom_smooth() +\n  theme_bw()\n\n# Super bad\nggplot(mpg, aes(x = cty, y = hwy, color = class)) + geom_point() + geom_smooth() + theme_bw()\n\n# Super bad and won't even work\nggplot(mpg, aes(x = cty, y = hwy, color = class))\n  + geom_point()\n  + geom_smooth() \n  + theme_bw()\n```\n\nPut each step in a dplyr pipeline on separate lines, with the `%>%` at the end of the line, indented with two spaces:\n\n```{r eval=FALSE}\n# Good\nmpg %>% \n  filter(cty > 10) %>% \n  group_by(class) %>% \n  summarize(avg_hwy = mean(hwy))\n\n# Bad\nmpg %>% filter(cty > 10) %>% group_by(class) %>% \n  summarize(avg_hwy = mean(hwy))\n\n# Super bad\nmpg %>% filter(cty > 10) %>% group_by(class) %>% summarize(avg_hwy = mean(hwy))\n\n# Super bad and won't even work\nmpg %>% \n  filter(cty > 10)\n  %>% group_by(class)\n  %>% summarize(avg_hwy = mean(hwy))\n```\n\n### Comments\n\n> See the [\"Comments\" section](https://style.tidyverse.org/syntax.html#comments) in the tidyverse style guide.\n\nComments should start with a comment symbol and a single space: `# `\n\n```{r eval=FALSE}\n# Good\n\n#Bad\n\n    #Bad\n```\n\nIf the comment is really short (and won't cause you to go over 80 characters in the line), you can include it in the same line as the code, separated by at least two spaces (it works with one space, but using a couple can enhance readability):\n\n```{r eval=FALSE}\nmpg %>% \n  filter(cty > 10) %>%  # Only rows where cty is 10 +\n  group_by(class) %>%  # Divide into class groups\n  summarize(avg_hwy = mean(hwy))  # Find the average hwy in each group\n```\n\nYou can add extra spaces to get inline comments to align, if you want:\n\n```{r eval=FALSE}\nmpg %>% \n  filter(cty > 10) %>%            # Only rows where cty is 10 +\n  group_by(class) %>%             # Divide into class groups\n  summarize(avg_hwy = mean(hwy))  # Find the average hwy in each group\n```\n\nIf the comment is really long, you can break it into multiple lines. RStudio can do this for you if you go to \"Code\" > \"Reflow comment\"\n\n```{r eval=FALSE}\n# Good\n# Happy families are all alike; every unhappy family is unhappy in its own way.\n# Everything was in confusion in the Oblonskys’ house. The wife had discovered\n# that the husband was carrying on an intrigue with a French girl, who had been\n# a governess in their family, and she had announced to her husband that she\n# could not go on living in the same house with him. This position of affairs\n# had now lasted three days, and not only the husband and wife themselves, but\n# all the members of their family and household, were painfully conscious of it.\n\n# Bad\n# Happy families are all alike; every unhappy family is unhappy in its own way. Everything was in confusion in the Oblonskys’ house. The wife had discovered that the husband was carrying on an intrigue with a French girl, who had been a governess in their family, and she had announced to her husband that she could not go on living in the same house with him. This position of affairs had now lasted three days, and not only the husband and wife themselves, but all the members of their family and household, were painfully conscious of it.\n```\n\nThough, if you're dealing with comments that are *that* long, consider putting the text in R Markdown instead and having it be actual prose.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"highlight-style":"monokai","output-file":"style.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","bibliography":["../files/bib/references.bib"],"csl":"../files/bib/chicago-author-date.csl","description-meta":"Use modern statistical and data scientific tools to measure causal effects and evaluate public policy","_quarto-vars":{"author":"Andrew Weiss","instructor":{"name":"Dr. Jacob Wallace","name_no_title":"Jacob Wallace","email":"jacob.wallace@yale.edu","url":"https://www.jacobwswallace.com/home","twitter":"jwswallace","github":"jacobwittwallace","office":"60 College St","contact_policy":"E-mail and Slack are the best ways to get in contact with me. I will try to respond to all course-related e-mails and Slack messages within 24 hours (*really*), but also remember that life can be busy and chaotic for everyone (including me!), so if I don't respond right away, don't worry!","appointment_url":"https://calendly.com/andrewheiss/"},"course":{"number":"HPM 587","semester":"Spring 2024","days":"Thursdays","time":"4:30–7:00 PM","location":"Winslow Auditorium, LEPH","dates":"January–April 30, 2024","github":"https://github.com/jacobwittwallace","url":"https://kpratt02.github.io/","copyright_year":"2022","slack":"https://gsuevalf2022.slack.com"},"university":{"name":"Yale University","url":"https://www.yale.edu"},"school":{"name":"Yale School of Public Health","url":"https://ysph.yale.edu/"}},"theme":["litera","../html/custom.scss"],"title":"R style suggestions"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}