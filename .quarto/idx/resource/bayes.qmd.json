{"title":"Bayesian statistics resources","markdown":{"yaml":{"title":"Bayesian statistics resources","format":{"html":{"code-tools":true,"code-fold":"show"}}},"headingText":"Resources","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(fig.width = 6, fig.height = 3.6, fig.align = \"center\",\n                      fig.retina = 3, collapse = TRUE, out.width = \"75%\")\nset.seed(1234)\noptions(\"digits\" = 2, \"width\" = 150)\n```\n\nIn class session 2 ([see this from the FAQ slides](/slides/02-class.html#12)) we talked briefly about the difference between frequentist statistics, where you test for the probability of your data given a null hypothesis, or $P(\\text{data} \\mid H_0)$, and Bayesian statistics, where you test for the probability of your hypothesis given your data, or $P(H \\mid \\text{data})$. \n\nThis difference is important. In the world of frequentism and null hypothesis significance testing (NHST), which is what pretty much all statistics classes use (including this one!), you have to compare your findings to a hypothetical null world and you have to talk about rejecting null hypotheses. In the Bayes world, though, you get to talk about the probability that your hypothesis is correct rather than the probability of seeing a value in a null world. So much more convenient and easy to interpret!\n\nBayesian statistics, though, requires a lot of computational power and a different way of thinking about statistics and numbers in general. And very few classes teach it. Including this one! I use Bayesian stats all the time in my own research (see [this](https://www.andrewheiss.com/research/articles/chaudhry-heiss-ngos-philanthropy/) or [this](https://www.andrewheiss.com/research/articles/chaudhry-dotson-heiss-2021/), for instance), but don't teach it (yet!) because nobody else really teaches it and frequentist statistics still rule the policy world, so you need to know it.\n\n\nBut you can learn it on your own. Because very few stats classes actually teach Bayesian statistics, tons of people who use it are self-taught (like me!), in part because there are a ton of resources online for learning this stuff. Here are some of the best I've found:\n\n- [This new *Bayes Rules* book](https://www.bayesrulesbook.com/) is designed to be an introductory textbook for a stats class teaching Bayesian stuff. It’s really accessible and good (and free!). If I ever get to teach an intro stats class with Bayesian stats, I'll use this.\n- [This post from 2016](https://thinkinator.com/2016/01/12/r-users-will-now-inevitably-become-bayesians/) is a great short introduction and is what made me start using Bayesian methods. [The **brms** package](https://paul-buerkner.github.io/brms/) makes it incredibly easy to do Bayesian stuff, and the syntax is basically the same as `lm()`\n- [This post shows how to do one simple task](https://www.andrewheiss.com/blog/2019/01/29/diff-means-half-dozen-ways/) (a difference-in-means test) with regular old frequentist methods, bootstrapping, and with Bayesian stats both with brms and raw Stan code\n- [This short post](https://www.tjmahr.com/bayes-theorem-in-three-panels/) gives a helpful overview of the intuition behind Bayesianism\n- The super canonical everyone-has-this-book book is [*Statistical Rethinking* by Richard McElreath](https://xcelab.net/rm/statistical-rethinking/). At that page he also has an entire set of accompanying lectures on YouTube. He doesn’t use brms or ggplot, but someone has translated all his models to [tidyverse-based brms code here](https://bookdown.org/ajkurz/Statistical_Rethinking_recoded/)\n- [*The Theory That Would Not Die*](https://www.amazon.com/Theory-That-Would-Not-Die/dp/0300188226) is a fun little general introduction to the history of Bayesianism and why it kind of disappeared in the 20th century and was replaced by frequentism and p-values and null hypothesis testing\n\n## Super short example\n\nIn practice, the R code for Bayesian models should be very familiar. For instance, here's a regular old frequentist OLS model:\n\n```{r freq-model, message=FALSE, warning=FALSE}\nlibrary(tidyverse)\nlibrary(broom)\n\nmodel_ols <- lm(hwy ~ displ + drv, data = mpg)\ntidy(model_ols, conf.int = TRUE)\n```\n\nHere's that same model using the **brms** package, with default priors. Note how the code is basically the same:\n\n```{r bayes-libraries, message=FALSE, warning=FALSE}\nlibrary(tidyverse)\nlibrary(brms)         # For Bayesian regression with brm()\nlibrary(broom.mixed)  # For tidy() and glance() with brms-based models\nlibrary(tidybayes)    # For extracting posterior draws\n```\n\n```{r bayes-model, message=FALSE, warning=FALSE, results='hide', cache=TRUE}\n# This will take a few seconds to run\nmodel_bayes <- brm(hwy ~ displ + drv, data = mpg)\n```\n\n```{r show-bayes-results, warning=FALSE}\ntidy(model_bayes)\n```\n\nIn Bayes land, you get a distribution of plausible values given the data (or what is called the \"posterior distribution\"), and you can visualize this posterior distribution:\n\n```{r plot-bayes-results}\n# Make a long dataset of the draws for these three coefficients\nposterior_draws <- model_bayes %>% \n  gather_draws(c(b_displ, b_drv, b_drvf, b_drvr))\n\n# Plot this thing\nggplot(posterior_draws, aes(x = .value, y = fct_rev(.variable), fill = .variable)) +\n  geom_vline(xintercept = 0) +\n  stat_halfeye(.width = c(0.8, 0.95), alpha = 0.8, point_interval = \"median_hdi\") +\n  guides(fill = \"none\") +\n  labs(x = \"Coefficient\", y = \"Variable\",\n       caption = \"80% and 95% credible intervals shown in black\")\n```\n\nThose are all the plausible values for these coefficients, given the data that we've fed the model, and the black bars at the bottom show the 80% and 95% credible intervals (or the range of values that 80/95% of the posterior covers). With this, there's a 95% chance that the coefficient for displacement is between −3.35 and −2.48. Neat!\n\n## Confidence intervals vs. credible intervals\n\n[In session 6](/content/06-content/), we talked about frequentist confidence intervals and Bayesian credible (or posterior) intervals, since I had you read [Guido Imbens's essay on *p*-values](https://doi.org/10.1257/jep.35.3.157), where his conclusion is that:\n\n> It would be preferable if reporting standards emphasized confidence intervals or standard errors, and, even better, Bayesian posterior intervals.\n\nImbens wants us to use Bayesian posterior intervals (or credible intervals), but how do we do that?\n\n### Frequentist confidence intervals\n\nIn frequentist statistics (i.e. all the statistics you've been exposed to in this class and all previous classes), your whole goal is to estimate and infer something about a population using a sample. This \"something\" is a true (but unknown) thing called a *population parameter*. It is a single fixed value that exists out in the world, and it's the main thing you're interested in discovering. Here are a bunch of different population parameters:\n\n- Average treatment effect of a program\n- Proportion of left-handed students at GSU\n- Median rent of apartments in NYC\n- Proportion of red M&Ms produced in a factory\n\nIn frequentist statistics, we take a sample from the population, calculate the parameter (i.e. mean, median, proportion, whatever) in the sample, and then check to see how good of a guess it might be for the whole population. To do that, we can look at a confidence interval. Think of a confidence interval as a net—it's a range of possible values for the population parameters, and we can be X% confident (typically 95%) that the net is picking up the population parameter. Another way to think about it is to imagine taking more samples. If you take 100 samples, at least 95 of them would have the true population parameter in their 95% confidence intervals. Frequentist statistics assumes that the unknown population parameter is fixed and singular, but that the data can vary—you can repeat an experiment over and over again, or take repeated samples from a population in order to be more certain about the estimate of the parameter (and shrink the net of the confidence interval).\n\n**Importantly**, when talking about confidence intervals, you cannot really say anything about the estimate of the parameter itself. Confidence intervals are all about the net, or the range itself. You can legally say this:\n\n> We are 95% confident that this confidence interval captures the true population parameter.\n\nYou **cannot** say this:\n\n> There's a 95% chance that the population parameter is X. *or* There's a 95% chance that the true value falls in this range.\n\nConfidence intervals tell you about the range, or the net. That's all.\n\nHere's an example with some data from *The Effect* on restaurant inspections in Alaska. We want to know if weekend inspections are more lenient that ones conducted during the work week. \n\n```{r load-restaurant-data, warning=FALSE, message=FALSE}\nlibrary(tidyverse)\nlibrary(broom)\nlibrary(gghalves)\n\ninspections <- read_csv(\"https://vincentarelbundock.github.io/Rdatasets/csv/causaldata/restaurant_inspections.csv\")\n```\n\nFirst we should look at the data to see if there are any obvious patterns. Let's look at scores separated by weekend status. We'll use [the neat **gghalves** package](https://erocoar.github.io/gghalves/) to plot both the raw points and a density plot. The orange points show the average value:\n\n```{r inspections-raw-distribution}\nggplot(inspections, aes(x = Weekend, y = inspection_score)) +\n  geom_half_point(side = \"l\", alpha = 0.2, size = 0.5,\n                  transformation = position_jitter(height = 0)) +\n  geom_half_violin(side = \"r\") +\n  stat_summary(fun.data = \"mean_se\", fun.args = list(mult = 1.96), color = \"orange\")\n```\n\nIt looks like weekend inspections are far more rare than weekday ones, and no weekend inspections every give scores lower than 80. It also looks like the average weekend score is slightly higher than the average weekday score. Let's figure out how much of a difference there is.\n\nBut first, we'll use the language of inference and sampling. Our population parameter (we'll call it the Greek letter theta, or $\\theta$) is some single true fixed number that exists out in the world—weekend restaurant inspections in Alaska have a $\\theta$ higher average score than weekday inspections. We want to find out what that $\\theta$ is, so we'll look at some confidence intervals.\n\nWe can look at a basic difference in means based on weekend status:\n\n```{r basic-diff-means}\nmodel_naive <- lm(inspection_score ~ Weekend, \n                  data = inspections)\ntidy(model_naive, conf.int = TRUE)\n```\n\nHere, weekend scores are 2.1 points higher than weekday scores, on average (that's our estimate, or $\\hat{\\theta}$. We have a confidence interval of 1.2–2.9. We *cannot* say that we're 95% confident that the weekend score boost (or $\\theta$) is between 1.2 and 2.9. What we *can* say is that we're 95% confident that the range 1.2–2.9 captures the true population parameter $\\theta$. If we took a bunch of different samples of inspection scores and calculated the average weekend vs. weekday score in each of those samples, 95% of those confidence intervals should capture the true $\\theta$. Importantly, we still have no idea what the actual $\\theta$ is, but we're pretty sure that our confidence interval net has captured it.\n\nThis estimate is probably wrong, since there are other factors that confound the weekend → score relationship. Maybe the health department only conducts weekend inspections in places with lots of branches, or maybe they did more weekend inspections in certain years. We can adjust/control for these in the model:\n\n```{r adjusted-diff-means}\nmodel_adjusted <- lm(inspection_score ~ Weekend + NumberofLocations + Year, \n                     data = inspections)\ntidy(model_adjusted, conf.int = TRUE)\n```\n\nOur weekend estimate shrunk a little and is now 1.43, with a confidence interval of 0.6–2.3. Again, think of this as a net—we're 95% sure that the true $\\theta$ is in that net somewhere. $\\theta$ could be 0.7, it could be 1.4, it could be 2.2—who knows. All we know is that our net most likely picked it up.\n\nFor fun, let's plot both these weekend estimates and their confidence intervals:\n\n```{r plot-freq-results}\n# Save just the weekend coefficient from both models\nfreq_results_naive <- tidy(model_naive, conf.int = TRUE) %>% \n  mutate(model = \"Naive model\") %>% \n  filter(term == \"WeekendTRUE\")\n\nfreq_results_full <- tidy(model_adjusted, conf.int = TRUE) %>% \n  mutate(model = \"Full model\") %>% \n  filter(term == \"WeekendTRUE\")\n\n# Put these coefficients in a single dataset and plot them\nfreq_results <- bind_rows(freq_results_naive, freq_results_full) %>% \n  # Make sure the model name follows the order it appears in the data instead of\n  # alphabetical order\n  mutate(model = fct_inorder(model))\n\nggplot(freq_results, aes(x = estimate, y = model, color = model)) +\n  geom_pointrange(aes(xmin = conf.low, xmax = conf.high)) +\n  guides(color = \"none\")\n```\n\n### Bayesian credible intervals\n\nRemember, with frequentist statistics, $\\theta$ is fixed and singular and we're hoping to pick it up with our confidence interval nets. The data we collect is variable—we can hypothetically take more and more samples and calculate a bunch of confidence intervals and become more certain about where $\\theta$ might be. We can only interpret confidence intervals as ranges: \"There's a 95% probability that the range contains the true value $\\theta$\". We can't say anything about the estimate of $\\theta$ itself. We've calculated the probability of the range, not the probability of the actual value.\n\nBayesian analysis, however, *does* let us talk about the probability of the actual value. Under Bayesianism, the *data* you're working with is fixed (i.e. you collected it once and it's all you have—you can't go out and collect infinite additional samples), and the population parameter $\\theta$ varies and has uncertainty about it (i.e. instead of imagining some single number uncapturable that's the average difference in weekend vs. weekday scores, $\\theta$ has some range around it).\n\nThis difference is apparent in the formulas for testing hypotheses under each of these approaches:\n\n$$\\underbrace{P(\\text{Data} \\mid \\theta)}_{\\substack{\\textbf{Frequentism} \\\\ \\text{Probability of seeing the} \\\\ \\text{data given that } \\theta \\text{ exists}}} \\qquad \\underbrace{P(\\theta \\mid \\text{Data})}_{\\substack{\\textbf{Bayesianism} \\\\ \\text{Probability of } \\theta \\\\ \\text{given the current data}}}$$\n\nBayes' theorem has a nice formula ([with neat intuition, like in this video](https://www.youtube.com/watch?v=HZGCoVF3YvM)):\n\n$$\n\\underbrace{P(\\theta \\mid \\text{Data})}_{\\text{Posterior}} = \\frac{\\overbrace{P(\\theta)}^{\\text{Prior}} \\times \\overbrace{P(\\text{Data} \\mid \\theta)}^{\\text{Likelihood}}}{P(\\text{Data})}\n$$\n\nPut (hopefully!) simply, combine the observed likelihood of the data $P(\\text{Data} \\mid \\theta)$ (that's basically frequentism!) with prior knowledge about the distribution of $\\theta$ and you'll get a posterior estimate of $\\theta$. \n\nActually calculating this with real data, though, can be tricky and computationally intensive—often there's no formal mathematical way to figure out the actual equation. So instead, we can use computers to simulate thousands of guesses and then look at the distribution of those guesses (just like we did with [the Zilch simulation in class](/resource/zilch.qmd#probability-with-computers-only)). One modern method for doing this is called Monte Carlo Markov Chain (MCMC) simulation, which is what most R-based tools for Bayesian stats use nowadays.\n\nLet's look at restaurant inspection scores on the weekend Bayesianly. Here, we're still interested in our population parameter $\\theta$, or the average weekend score boost. Only now, we're not assuming that $\\theta$ is some single fixed value out in the world that we're trying to capture with confidence intervals—we'll use the data that we have to estimate the variation in $\\theta$. The easiest way to do Bayesian analysis with R is with [the **brms** package](https://paul-buerkner.github.io/brms/), which uses the familiar formula syntax you've been using with `lm()`. The syntax is super similar, just with a few additional arguments:\n\n**MCMC things**\n\nArguments like `chains`, `iter`, and `cores` deal with the simulation. `chains` defines how many parallel simulations should happen, `iter` controls how many iterations should happen with in each chain, and `cores` spreads those chains across the CPUs in your computer (i.e. if you have a 4-core computer, you can run 4 chains all at the same time; run `parallel::detectCores()` in your R console to see how many CPU cores you have). `seed` makes it so that the random simulation results are reproducible ([see here for more on seeds](/example/random-numbers.qmd#seeds)).\n\n**Priors**\n\nThese define your prior beliefs about the parameters (i.e. $\\theta$) in the model. If you think that the restaurant weekend inspection boost is probably positive, but could possibly be negative, or maybe zero, you can feed that belief into the model. For instance, if you're fairly confident (based on experiences in other states maybe) that weekend scores really are higher, you can provide an *informative* prior that says that $\\theta$ is most likely 1.5 points ± a little variation, following a normal distribution. Or, if you have no idea what it could be—maybe it's super high like 10, maybe it's negative like −5, or maybe it's 0 and there's no weekend boost—you can provide a *vague* prior that says that $\\theta$ is 0 points ± a ton of variation.\n\n```{r priors, fig.width=8}\nlibrary(patchwork)  # For combining ggplot plots\n\nplot_informative <- ggplot() +\n  stat_function(fun = dnorm, args = list(mean = 1.5, sd = 0.5),\n                geom = \"area\", fill = \"grey80\", color = \"black\") +\n  xlim(-1, 4) +\n  labs(title = \"Informative prior\", subtitle = \"Normal(mean = 1.5, sd = 0.5)\",\n       caption = \"We're pretty sure θ is around 1.5\")\n\nplot_vague <- ggplot() +\n  stat_function(fun = dnorm, args = list(mean = 0, sd = 10),\n                geom = \"area\", fill = \"grey80\", color = \"black\") +\n  xlim(-35, 35) +\n  labs(title = \"Vague prior\", subtitle = \"Normal(mean = 0, sd = 10)\",\n       caption = \"Surely θ is in there *somewhere*\")\n\nplot_informative | plot_vague\n```\n\nFor the sake of this example, we'll use a vague prior.\n\nHere's how to officially do Bayesian analysis with **brms** and incorporate prior information about $\\theta$. Again, the syntax is super similar to `lm()`, just with some extra bits about the prior and the MCMC settings:\n\n```{r load-bayes-stuff, warning=FALSE, message=FALSE}\nlibrary(brms)         # For Bayesian regression with brm()\nlibrary(broom.mixed)  # For tidy() and glance() with brms-based models\nlibrary(tidybayes)    # For extracting posterior draws\nlibrary(ggdist)       # For making pretty posterior plots\n```\n\n```{r actual-brms-model, cache=TRUE, results='hide'}\n# bf() stands for \"bayes formula\"; you technically don't need to use it, but it \n# makes life easier for more complex models, so it's good practice even when \n# using a simple formula like the one here\n#\n# This will take a little bit of time to run. Here's what it's actually doing:\n#\n# 1. Translate this R code to Stan (a specific language for doing Bayesian stuff with MCMC)\n# 2. Compile the Stan code to faster-running C++ code\n# 3. Actually do the MCMC sampling\n\n# Set the prior for the weekend coefficient\n# Use get_priors() to see all the other default priors\npriors <- c(\n  prior(normal(0, 10), class = \"b\", coef = \"WeekendTRUE\")\n)\n\n# Run the model!\nmodel_bayes <- brm(bf(inspection_score ~ Weekend + NumberofLocations + Year),\n                   data = inspections,\n                   prior = priors,\n                   chains = 4, iter = 2000, cores = 4, seed = 1234)\n```\n\nPhew. That took a while to run, but it ran! Now we can check the results:\n\n```{r warning=FALSE}\ntidy(model_bayes, conf.int = TRUE)\n```\n\n```{r warning=FALSE, include=FALSE}\nresults <- tidy(model_bayes, conf.int = TRUE) %>% \n  filter(effect == \"fixed\") %>% \n  mutate(across(c(estimate, conf.low, conf.high), \n                list(nice = ~as.character(round(., 2))))) %>% \n  split(.$term)\n```\n\nOur estimate for the weekend boost, or $\\hat{\\theta}$, is `r results$WeekendTRUE$estimate_nice`, which is basically the same as the frequentist estimate we found before. We have an interval too, but it's not a confidence interval—it's a credible interval. Instead of telling us about the range of the confidence interval net, this credible interval tells us the probability that $\\hat{\\theta}$ falls in that range. It's essentially the probability of the actual value, not the probability of the range. Based on this, there's a 95% chance that—given the data we have—the weekend score boost ($\\hat{\\theta}$) is between `r results$WeekendTRUE$conf.low_nice` and `r results$WeekendTRUE$conf.high_nice`.\n\nWe can visualize this posterior distribution to see more information than we could with our frequentist estimate. Remember, our simulation estimated thousands of possible coefficients for `WeekendTRUE`, and each of them are equally likely. The value that we see in `tidy()` is the median of all these simulated coefficients, or draws. We can see a few of them here:\n\n```{r}\nmodel_bayes %>%\n  spread_draws(b_WeekendTRUE) %>%\n  head(10)\n```\n\nSometimes the weekend boost is 1.2, sometimes 1.7, sometimes 1.3, etc. There's a lot of variation in there. We can plot all these simulated coefficients to see where they mostly cluster:\n\n```{r weekend-posterior-halfeye}\nweekend_draws <- model_bayes %>%\n  spread_draws(b_WeekendTRUE)\n\nggplot(weekend_draws, aes(x = b_WeekendTRUE)) +\n  stat_halfeye() +\n  labs(caption = \"Point shows median value;\\nthick black bar shows 66% credible interval;\\nthin black bar shows 95% credible interval\")\n```\n\nThe weekend point boost $\\hat{\\theta}$ is mostly clustered around 1–2, and 95% of those draws are between `r results$WeekendTRUE$conf.low_nice` and `r results$WeekendTRUE$conf.high_nice`. We're thus 95% sure that the actual weekend point boost is between `r results$WeekendTRUE$conf.low_nice` and `r results$WeekendTRUE$conf.high_nice` with a median of `r results$WeekendTRUE$estimate_nice`. \n\nWe can also look at this distribution a slightly different way by collapsing all those posterior draws into 100 possible values. Each of these dots is equally likely, and the true value of $\\theta$ could be any of them, but again, most are clustered around `r results$WeekendTRUE$estimate_nice`:\n\n```{r weekend-posterior-dots}\nggplot(weekend_draws, aes(x = b_WeekendTRUE)) +\n  stat_dotsinterval(quantiles = 100) +\n  labs(caption = \"Point shows median value;\\nthick black bar shows 66% credible interval;\\nthin black bar shows 95% credible interval\")\n```\n\n## General summary of intervals\n\nSo, we've seen two different philosophies for quantifying uncertainty with confidence intervals and credible intervals. Here's a general overview of the two approaches and how you can interpret them:\n\n```{r summary-table, echo=FALSE, warning=FALSE, message=FALSE}\nlibrary(kableExtra)\n\ntribble(\n  ~` `, ~Frequentism, ~Bayesianism,\n  \"Approach\", \"\\\\(P(\\\\text{Data} \\\\mid \\\\theta)\\\\)\", \"\\\\(P(\\\\theta \\\\mid \\\\text{Data})\\\\)\",\n  \"\", \"\\\\(\\\\theta\\\\) is a fixed single value; data is variable and can be repeatedly sampled\", \"\\\\(\\\\theta\\\\) is variable and has uncertainty; data is fixed (you only have one sample)\",\n  \"How to do it in R\", \"<code>lm(...)</code>\", \"<code>library(brms)</code><br><code>brm(...)</code>\",\n  \"Name\", \"Confidence interval\", \"Credible interval (or posterior interval)\",\n  \"Intuition\", \"Probability of the range\", \"Probability of the actual value\",\n  \"Interpretation template\", \"There's a 95% probability that this range contains the true value of \\\\(\\\\theta\\\\)\", \"There's a 95% probability that the true value of \\\\(\\\\theta\\\\) falls in this range.\",\n  \"\", \"Few people naturally think like this\", \"People <em>do</em> naturally think like this\"\n) %>% \n  kbl(escape = FALSE) %>% \n  kable_styling(full_width = FALSE, position = \"center\")\n```\n\n## Two ways of making decisions with posterior distributions\n\nIn the world of frequentism, we're interested in whether coefficients are statistically different from 0 in a null world where there's no effect. We rely on *p*-values to see the probability of seeing an estimate at least as large as what we've calculated in a hypothetical world where that estimate is actually 0. This is a really non-intuitive way of thinking about the world (imaginary null worlds?!), so everyone always misinterprets *p*-values.\n\nRemember what you read in [Imbens's article](https://doi.org/10.1257/jep.35.3.157) though—in real life, very few people care about whether a coefficient is significantly different from a hypothetical null. Instead, people want to know how certain you are of the estimate and what it means practically. Is it for sure a positive effect, or could it maybe be zero or maybe be negative? Significance stars can't tell us much about those questions, but posterior Bayesian intervals can.\n\n### Probability of direction\n\nOne question we can answer with Bayesian results is \"How certain are we that this estimate is positive (or negative)?\" Are we sure the weekend scores are higher on average, or could they sometimes be negative? Are we sure that the average treatment effect of your program decreases poverty, or could it maybe have a positive effect instead?\n\nTo figure this out, we can calculate something called the [\"probability of direction,\"](https://easystats.github.io/bayestestR/articles/probability_of_direction.html) or the proportion of posterior draws that are above (or below) some arbitrary number. For instance, what's the probability that the weekend boost is positive (or greater than 0)?\n\n```{r}\n# Find the proportion of posterior draws that are bigger than 0\nweekend_draws %>% \n  summarize(prop_greater_0 = sum(b_WeekendTRUE > 0) / n())\n```\n\nWhoa. 99.9% of the posterior draws for the weekend boost are greater than 0, meaning that there's a 99.9% chance that the coefficient is positive, given the data we have. \n\nThe neat thing about the probability of direction is that we can choose whatever value we want as the threshold. Let's say the state health director wants to know if weekend scores are higher than weekday scores, but she's fine with just a little boost (weekends are nice! inspectors are happier!). Pretend that she thinks an average difference of 1 or lower isn't a big concern, but seeing a difference greater than 1 is a signal that weekend inspectors are maybe being too lenient. We can use 1 as our threshold instead:\n\n```{r}\n# Find the proportion of posterior draws that are bigger than 1\nweekend_draws %>% \n  summarize(prop_greater_0 = sum(b_WeekendTRUE > 1) / n())\n```\n\nBased on this, 84% of the draws are higher than 1, so there's an 84% chance that the actual $\\theta$ is greater than 1. Notice how there's no discussion of significance here—no alpha thresholds, no stars, no null worlds. We just have a probability that $\\hat{\\theta}$ is above 1. We can even visualize it. Everything to the right of that vertical line at 1 is \"significant\" (but not significant with null worlds and stars).\n\n```{r plot-pd}\nggplot(weekend_draws, aes(x = b_WeekendTRUE)) +\n  stat_halfeye(aes(fill_ramp = stat(x > 1)), fill = \"red\") +\n  scale_fill_ramp_discrete(from = \"darkred\", guide = \"none\") +\n  geom_vline(xintercept = 1) +\n  labs(caption = \"Point shows median value;\\nthick black bar shows 66% credible interval;\\nthin black bar shows 95% credible interval\")\n```\n\nShould the state health director be concerned? Probably. There's an 84% chance that weekend inspection scores are at least 1 point higher than weekday scores, on average, given the data we have.\n\n### Region of practical equivalence (ROPE)\n\nLooking at the probability of direction is helpful if you are concerned whether an effect is positive or negative (i.e. greater or less than 0), but it's also a little weird to think about because we're testing if something is greater or less than some specific single number. In our example of the health director, we pretended that she cared whether the average weekend score was 1 point higher, but that's arbitrary. \n\nAnother approach is that we can think of a range of $\\theta$ where there's practically no effect. Think of this as a \"dead zone\" of sorts. If $\\hat{\\theta}$ is 0, we know there's no effect. If $\\hat{\\theta}$ is something tiny like 0.2 or -0.3, we probably don't actually care—that's a tiny amount and could just be because of measurement error. It's not anything really actionable. If $\\hat{\\theta}$ is big like 1.3 or -2.4 or whatever, then we have cause to worry, but if the estimate is in the \"dead zone\" (however we want to define it), then we shouldn't really care or worry. \n\nThe official Bayesian term for this \"dead zone\" is [the *region of practical equivalence* (ROPE)](https://easystats.github.io/bayestestR/articles/region_of_practical_equivalence.html). There are lots of ways to determine this dead zone—you can base it on experience with the phenomenon (e.g., if you're the health director and know a lot about inspection scores, you know what kind of score ranges matter), or you can base it on the data you have (e.g., `-0.1 * sd(outcome)` to `0.1 * sd(outcome)`). \n\nFor this example, let's pretend that the health director tells you that any effect between −0.5 and 0.5 doesn't matter—for her, those kind of values would be the same as 0. Now that we have a dead zone or ROPE, we can calculate the proportion of coefficient draws that fall outside of that ROPE:\n\n```{r}\n# Find the proportion of posterior draws that are bigger than 0.5 or less than -0.5\nweekend_draws %>% \n  summarize(prop_outside_rope = 1 - sum(b_WeekendTRUE >= -0.5 & b_WeekendTRUE <= 0.5) / n())\n```\n\n```{r plot-rope}\nggplot(weekend_draws, aes(x = b_WeekendTRUE)) +\n  stat_halfeye(aes(fill_ramp = stat(x >= 0.5 | x <= -0.5)), fill = \"red\") +\n  scale_fill_ramp_discrete(from = \"darkred\", guide = \"none\") +\n  annotate(geom = \"rect\", xmin = -0.5, xmax = 0.5, ymin = -Inf, ymax = Inf, fill = \"purple\", alpha = 0.3) +\n  annotate(geom = \"label\", x = 0, y = 0.75, label = \"ROPE\\n(dead zone)\") +\n  labs(caption = \"Point shows median value;\\nthick black bar shows 66% credible interval;\\nthin black bar shows 95% credible interval\")\n```\n\nGiven this data, 98% of the posterior distribution of the weekend boost is outside of the ROPE, or dead zone, so we can consider this to be \"significant\" (again, this is a tricky word because it has nothing to do with null worlds and stars!).\n\nThere are some debates over what you should check with the ROPE. Some people say that you should look at how much of the 95% credible interval is inside the dead zone; other say you should look at how much of the entire distribution is inside the dead zone. We just did the latter, with the whole distribution. If we want to see how much of the area within the credible interval is inside the dead zone, we can change the code a little to filter those observations out:\n\n```{r}\n# Extract the 95% confidence interval range\nweekend_cred_int <- weekend_draws %>% \n  median_hdi()\nweekend_cred_int$.lower\n\n# Find the proportion of posterior draws that are bigger than 0.5 or less than \n# -0.5, but only look inside the 95% credible interval\nweekend_draws %>% \n  # Only look inside the credible interval\n  filter(b_WeekendTRUE >= weekend_cred_int$.lower & b_WeekendTRUE <= weekend_cred_int$.upper) %>% \n  summarize(prop_outside_rope = 1 - sum(b_WeekendTRUE >= -0.5 & b_WeekendTRUE <= 0.5) / n())\n```\n\nIf we look only at the 95% credible interval of the posterior, there's a 0% chance that any of those estimated coefficients are in the dead zone / ROPE. There's a 100% chance that the credible interval doesn't touch the ROPE. You can see this visually too—look at the figure above with the purple ROPE. The thin black bar that shows the 95% credible interval doesn't show up in the purple area.\n\nWhich approach is better—using full distribution or just using the credible interval? Who knows. That's up to you.\n\nFinally, here we decided on the ROPE kind of arbitrarily as −0.5 to 0.5, but there are more systematic ways of doing it. [One common and standard suggestion](https://easystats.github.io/bayestestR/articles/region_of_practical_equivalence.html#how-to-define-the-rope-range-) is to use −0.1 and 0.1 times the standard deviation of the outcome variable:\n\n```{r}\nc(-0.1, 0.1) * sd(inspections$inspection_score)\n```\n\nBased on this approach, our ROPE/dead zone should be −0.63 to 0.63. Let's see how that looks:\n\n```{r}\n# Find the proportion of posterior draws that are bigger than 0.5 or less than \n# -0.5, but only look inside the 95% credible interval\nweekend_draws %>% \n  # Only look inside the credible interval\n  filter(b_WeekendTRUE >= weekend_cred_int$.lower & b_WeekendTRUE <= weekend_cred_int$.upper) %>% \n  summarize(prop_outside_rope = 1 - sum(b_WeekendTRUE >= -0.63 & b_WeekendTRUE <= 0.63) / n())\n```\n\n```{r plot-rope-sd}\nggplot(weekend_draws, aes(x = b_WeekendTRUE)) +\n  stat_halfeye(aes(fill_ramp = stat(x >= 0.63 | x <= -0.63)), fill = \"red\") +\n  scale_fill_ramp_discrete(from = \"darkred\", guide = \"none\") +\n  annotate(geom = \"rect\", xmin = -0.63, xmax = 0.63, ymin = -Inf, ymax = Inf, fill = \"purple\", alpha = 0.3) +\n  annotate(geom = \"label\", x = 0, y = 0.75, label = \"ROPE\\n(dead zone)\") +\n  labs(caption = \"Point shows median value;\\nthick black bar shows 66% credible interval;\\nthin black bar shows 95% credible interval\")\n```\n\nThis changes our results just a tiny bit. 97% of the full posterior distribution and 99.7% of the credible interval falls outside this ROPE. Neat. We can thus safely say that the weekend effect, or our estimate of $\\theta$ is definitely practical and substantial (or \"significant\" if we want to play with that language).\n","srcMarkdownNoYaml":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(fig.width = 6, fig.height = 3.6, fig.align = \"center\",\n                      fig.retina = 3, collapse = TRUE, out.width = \"75%\")\nset.seed(1234)\noptions(\"digits\" = 2, \"width\" = 150)\n```\n\nIn class session 2 ([see this from the FAQ slides](/slides/02-class.html#12)) we talked briefly about the difference between frequentist statistics, where you test for the probability of your data given a null hypothesis, or $P(\\text{data} \\mid H_0)$, and Bayesian statistics, where you test for the probability of your hypothesis given your data, or $P(H \\mid \\text{data})$. \n\nThis difference is important. In the world of frequentism and null hypothesis significance testing (NHST), which is what pretty much all statistics classes use (including this one!), you have to compare your findings to a hypothetical null world and you have to talk about rejecting null hypotheses. In the Bayes world, though, you get to talk about the probability that your hypothesis is correct rather than the probability of seeing a value in a null world. So much more convenient and easy to interpret!\n\nBayesian statistics, though, requires a lot of computational power and a different way of thinking about statistics and numbers in general. And very few classes teach it. Including this one! I use Bayesian stats all the time in my own research (see [this](https://www.andrewheiss.com/research/articles/chaudhry-heiss-ngos-philanthropy/) or [this](https://www.andrewheiss.com/research/articles/chaudhry-dotson-heiss-2021/), for instance), but don't teach it (yet!) because nobody else really teaches it and frequentist statistics still rule the policy world, so you need to know it.\n\n## Resources\n\nBut you can learn it on your own. Because very few stats classes actually teach Bayesian statistics, tons of people who use it are self-taught (like me!), in part because there are a ton of resources online for learning this stuff. Here are some of the best I've found:\n\n- [This new *Bayes Rules* book](https://www.bayesrulesbook.com/) is designed to be an introductory textbook for a stats class teaching Bayesian stuff. It’s really accessible and good (and free!). If I ever get to teach an intro stats class with Bayesian stats, I'll use this.\n- [This post from 2016](https://thinkinator.com/2016/01/12/r-users-will-now-inevitably-become-bayesians/) is a great short introduction and is what made me start using Bayesian methods. [The **brms** package](https://paul-buerkner.github.io/brms/) makes it incredibly easy to do Bayesian stuff, and the syntax is basically the same as `lm()`\n- [This post shows how to do one simple task](https://www.andrewheiss.com/blog/2019/01/29/diff-means-half-dozen-ways/) (a difference-in-means test) with regular old frequentist methods, bootstrapping, and with Bayesian stats both with brms and raw Stan code\n- [This short post](https://www.tjmahr.com/bayes-theorem-in-three-panels/) gives a helpful overview of the intuition behind Bayesianism\n- The super canonical everyone-has-this-book book is [*Statistical Rethinking* by Richard McElreath](https://xcelab.net/rm/statistical-rethinking/). At that page he also has an entire set of accompanying lectures on YouTube. He doesn’t use brms or ggplot, but someone has translated all his models to [tidyverse-based brms code here](https://bookdown.org/ajkurz/Statistical_Rethinking_recoded/)\n- [*The Theory That Would Not Die*](https://www.amazon.com/Theory-That-Would-Not-Die/dp/0300188226) is a fun little general introduction to the history of Bayesianism and why it kind of disappeared in the 20th century and was replaced by frequentism and p-values and null hypothesis testing\n\n## Super short example\n\nIn practice, the R code for Bayesian models should be very familiar. For instance, here's a regular old frequentist OLS model:\n\n```{r freq-model, message=FALSE, warning=FALSE}\nlibrary(tidyverse)\nlibrary(broom)\n\nmodel_ols <- lm(hwy ~ displ + drv, data = mpg)\ntidy(model_ols, conf.int = TRUE)\n```\n\nHere's that same model using the **brms** package, with default priors. Note how the code is basically the same:\n\n```{r bayes-libraries, message=FALSE, warning=FALSE}\nlibrary(tidyverse)\nlibrary(brms)         # For Bayesian regression with brm()\nlibrary(broom.mixed)  # For tidy() and glance() with brms-based models\nlibrary(tidybayes)    # For extracting posterior draws\n```\n\n```{r bayes-model, message=FALSE, warning=FALSE, results='hide', cache=TRUE}\n# This will take a few seconds to run\nmodel_bayes <- brm(hwy ~ displ + drv, data = mpg)\n```\n\n```{r show-bayes-results, warning=FALSE}\ntidy(model_bayes)\n```\n\nIn Bayes land, you get a distribution of plausible values given the data (or what is called the \"posterior distribution\"), and you can visualize this posterior distribution:\n\n```{r plot-bayes-results}\n# Make a long dataset of the draws for these three coefficients\nposterior_draws <- model_bayes %>% \n  gather_draws(c(b_displ, b_drv, b_drvf, b_drvr))\n\n# Plot this thing\nggplot(posterior_draws, aes(x = .value, y = fct_rev(.variable), fill = .variable)) +\n  geom_vline(xintercept = 0) +\n  stat_halfeye(.width = c(0.8, 0.95), alpha = 0.8, point_interval = \"median_hdi\") +\n  guides(fill = \"none\") +\n  labs(x = \"Coefficient\", y = \"Variable\",\n       caption = \"80% and 95% credible intervals shown in black\")\n```\n\nThose are all the plausible values for these coefficients, given the data that we've fed the model, and the black bars at the bottom show the 80% and 95% credible intervals (or the range of values that 80/95% of the posterior covers). With this, there's a 95% chance that the coefficient for displacement is between −3.35 and −2.48. Neat!\n\n## Confidence intervals vs. credible intervals\n\n[In session 6](/content/06-content/), we talked about frequentist confidence intervals and Bayesian credible (or posterior) intervals, since I had you read [Guido Imbens's essay on *p*-values](https://doi.org/10.1257/jep.35.3.157), where his conclusion is that:\n\n> It would be preferable if reporting standards emphasized confidence intervals or standard errors, and, even better, Bayesian posterior intervals.\n\nImbens wants us to use Bayesian posterior intervals (or credible intervals), but how do we do that?\n\n### Frequentist confidence intervals\n\nIn frequentist statistics (i.e. all the statistics you've been exposed to in this class and all previous classes), your whole goal is to estimate and infer something about a population using a sample. This \"something\" is a true (but unknown) thing called a *population parameter*. It is a single fixed value that exists out in the world, and it's the main thing you're interested in discovering. Here are a bunch of different population parameters:\n\n- Average treatment effect of a program\n- Proportion of left-handed students at GSU\n- Median rent of apartments in NYC\n- Proportion of red M&Ms produced in a factory\n\nIn frequentist statistics, we take a sample from the population, calculate the parameter (i.e. mean, median, proportion, whatever) in the sample, and then check to see how good of a guess it might be for the whole population. To do that, we can look at a confidence interval. Think of a confidence interval as a net—it's a range of possible values for the population parameters, and we can be X% confident (typically 95%) that the net is picking up the population parameter. Another way to think about it is to imagine taking more samples. If you take 100 samples, at least 95 of them would have the true population parameter in their 95% confidence intervals. Frequentist statistics assumes that the unknown population parameter is fixed and singular, but that the data can vary—you can repeat an experiment over and over again, or take repeated samples from a population in order to be more certain about the estimate of the parameter (and shrink the net of the confidence interval).\n\n**Importantly**, when talking about confidence intervals, you cannot really say anything about the estimate of the parameter itself. Confidence intervals are all about the net, or the range itself. You can legally say this:\n\n> We are 95% confident that this confidence interval captures the true population parameter.\n\nYou **cannot** say this:\n\n> There's a 95% chance that the population parameter is X. *or* There's a 95% chance that the true value falls in this range.\n\nConfidence intervals tell you about the range, or the net. That's all.\n\nHere's an example with some data from *The Effect* on restaurant inspections in Alaska. We want to know if weekend inspections are more lenient that ones conducted during the work week. \n\n```{r load-restaurant-data, warning=FALSE, message=FALSE}\nlibrary(tidyverse)\nlibrary(broom)\nlibrary(gghalves)\n\ninspections <- read_csv(\"https://vincentarelbundock.github.io/Rdatasets/csv/causaldata/restaurant_inspections.csv\")\n```\n\nFirst we should look at the data to see if there are any obvious patterns. Let's look at scores separated by weekend status. We'll use [the neat **gghalves** package](https://erocoar.github.io/gghalves/) to plot both the raw points and a density plot. The orange points show the average value:\n\n```{r inspections-raw-distribution}\nggplot(inspections, aes(x = Weekend, y = inspection_score)) +\n  geom_half_point(side = \"l\", alpha = 0.2, size = 0.5,\n                  transformation = position_jitter(height = 0)) +\n  geom_half_violin(side = \"r\") +\n  stat_summary(fun.data = \"mean_se\", fun.args = list(mult = 1.96), color = \"orange\")\n```\n\nIt looks like weekend inspections are far more rare than weekday ones, and no weekend inspections every give scores lower than 80. It also looks like the average weekend score is slightly higher than the average weekday score. Let's figure out how much of a difference there is.\n\nBut first, we'll use the language of inference and sampling. Our population parameter (we'll call it the Greek letter theta, or $\\theta$) is some single true fixed number that exists out in the world—weekend restaurant inspections in Alaska have a $\\theta$ higher average score than weekday inspections. We want to find out what that $\\theta$ is, so we'll look at some confidence intervals.\n\nWe can look at a basic difference in means based on weekend status:\n\n```{r basic-diff-means}\nmodel_naive <- lm(inspection_score ~ Weekend, \n                  data = inspections)\ntidy(model_naive, conf.int = TRUE)\n```\n\nHere, weekend scores are 2.1 points higher than weekday scores, on average (that's our estimate, or $\\hat{\\theta}$. We have a confidence interval of 1.2–2.9. We *cannot* say that we're 95% confident that the weekend score boost (or $\\theta$) is between 1.2 and 2.9. What we *can* say is that we're 95% confident that the range 1.2–2.9 captures the true population parameter $\\theta$. If we took a bunch of different samples of inspection scores and calculated the average weekend vs. weekday score in each of those samples, 95% of those confidence intervals should capture the true $\\theta$. Importantly, we still have no idea what the actual $\\theta$ is, but we're pretty sure that our confidence interval net has captured it.\n\nThis estimate is probably wrong, since there are other factors that confound the weekend → score relationship. Maybe the health department only conducts weekend inspections in places with lots of branches, or maybe they did more weekend inspections in certain years. We can adjust/control for these in the model:\n\n```{r adjusted-diff-means}\nmodel_adjusted <- lm(inspection_score ~ Weekend + NumberofLocations + Year, \n                     data = inspections)\ntidy(model_adjusted, conf.int = TRUE)\n```\n\nOur weekend estimate shrunk a little and is now 1.43, with a confidence interval of 0.6–2.3. Again, think of this as a net—we're 95% sure that the true $\\theta$ is in that net somewhere. $\\theta$ could be 0.7, it could be 1.4, it could be 2.2—who knows. All we know is that our net most likely picked it up.\n\nFor fun, let's plot both these weekend estimates and their confidence intervals:\n\n```{r plot-freq-results}\n# Save just the weekend coefficient from both models\nfreq_results_naive <- tidy(model_naive, conf.int = TRUE) %>% \n  mutate(model = \"Naive model\") %>% \n  filter(term == \"WeekendTRUE\")\n\nfreq_results_full <- tidy(model_adjusted, conf.int = TRUE) %>% \n  mutate(model = \"Full model\") %>% \n  filter(term == \"WeekendTRUE\")\n\n# Put these coefficients in a single dataset and plot them\nfreq_results <- bind_rows(freq_results_naive, freq_results_full) %>% \n  # Make sure the model name follows the order it appears in the data instead of\n  # alphabetical order\n  mutate(model = fct_inorder(model))\n\nggplot(freq_results, aes(x = estimate, y = model, color = model)) +\n  geom_pointrange(aes(xmin = conf.low, xmax = conf.high)) +\n  guides(color = \"none\")\n```\n\n### Bayesian credible intervals\n\nRemember, with frequentist statistics, $\\theta$ is fixed and singular and we're hoping to pick it up with our confidence interval nets. The data we collect is variable—we can hypothetically take more and more samples and calculate a bunch of confidence intervals and become more certain about where $\\theta$ might be. We can only interpret confidence intervals as ranges: \"There's a 95% probability that the range contains the true value $\\theta$\". We can't say anything about the estimate of $\\theta$ itself. We've calculated the probability of the range, not the probability of the actual value.\n\nBayesian analysis, however, *does* let us talk about the probability of the actual value. Under Bayesianism, the *data* you're working with is fixed (i.e. you collected it once and it's all you have—you can't go out and collect infinite additional samples), and the population parameter $\\theta$ varies and has uncertainty about it (i.e. instead of imagining some single number uncapturable that's the average difference in weekend vs. weekday scores, $\\theta$ has some range around it).\n\nThis difference is apparent in the formulas for testing hypotheses under each of these approaches:\n\n$$\\underbrace{P(\\text{Data} \\mid \\theta)}_{\\substack{\\textbf{Frequentism} \\\\ \\text{Probability of seeing the} \\\\ \\text{data given that } \\theta \\text{ exists}}} \\qquad \\underbrace{P(\\theta \\mid \\text{Data})}_{\\substack{\\textbf{Bayesianism} \\\\ \\text{Probability of } \\theta \\\\ \\text{given the current data}}}$$\n\nBayes' theorem has a nice formula ([with neat intuition, like in this video](https://www.youtube.com/watch?v=HZGCoVF3YvM)):\n\n$$\n\\underbrace{P(\\theta \\mid \\text{Data})}_{\\text{Posterior}} = \\frac{\\overbrace{P(\\theta)}^{\\text{Prior}} \\times \\overbrace{P(\\text{Data} \\mid \\theta)}^{\\text{Likelihood}}}{P(\\text{Data})}\n$$\n\nPut (hopefully!) simply, combine the observed likelihood of the data $P(\\text{Data} \\mid \\theta)$ (that's basically frequentism!) with prior knowledge about the distribution of $\\theta$ and you'll get a posterior estimate of $\\theta$. \n\nActually calculating this with real data, though, can be tricky and computationally intensive—often there's no formal mathematical way to figure out the actual equation. So instead, we can use computers to simulate thousands of guesses and then look at the distribution of those guesses (just like we did with [the Zilch simulation in class](/resource/zilch.qmd#probability-with-computers-only)). One modern method for doing this is called Monte Carlo Markov Chain (MCMC) simulation, which is what most R-based tools for Bayesian stats use nowadays.\n\nLet's look at restaurant inspection scores on the weekend Bayesianly. Here, we're still interested in our population parameter $\\theta$, or the average weekend score boost. Only now, we're not assuming that $\\theta$ is some single fixed value out in the world that we're trying to capture with confidence intervals—we'll use the data that we have to estimate the variation in $\\theta$. The easiest way to do Bayesian analysis with R is with [the **brms** package](https://paul-buerkner.github.io/brms/), which uses the familiar formula syntax you've been using with `lm()`. The syntax is super similar, just with a few additional arguments:\n\n**MCMC things**\n\nArguments like `chains`, `iter`, and `cores` deal with the simulation. `chains` defines how many parallel simulations should happen, `iter` controls how many iterations should happen with in each chain, and `cores` spreads those chains across the CPUs in your computer (i.e. if you have a 4-core computer, you can run 4 chains all at the same time; run `parallel::detectCores()` in your R console to see how many CPU cores you have). `seed` makes it so that the random simulation results are reproducible ([see here for more on seeds](/example/random-numbers.qmd#seeds)).\n\n**Priors**\n\nThese define your prior beliefs about the parameters (i.e. $\\theta$) in the model. If you think that the restaurant weekend inspection boost is probably positive, but could possibly be negative, or maybe zero, you can feed that belief into the model. For instance, if you're fairly confident (based on experiences in other states maybe) that weekend scores really are higher, you can provide an *informative* prior that says that $\\theta$ is most likely 1.5 points ± a little variation, following a normal distribution. Or, if you have no idea what it could be—maybe it's super high like 10, maybe it's negative like −5, or maybe it's 0 and there's no weekend boost—you can provide a *vague* prior that says that $\\theta$ is 0 points ± a ton of variation.\n\n```{r priors, fig.width=8}\nlibrary(patchwork)  # For combining ggplot plots\n\nplot_informative <- ggplot() +\n  stat_function(fun = dnorm, args = list(mean = 1.5, sd = 0.5),\n                geom = \"area\", fill = \"grey80\", color = \"black\") +\n  xlim(-1, 4) +\n  labs(title = \"Informative prior\", subtitle = \"Normal(mean = 1.5, sd = 0.5)\",\n       caption = \"We're pretty sure θ is around 1.5\")\n\nplot_vague <- ggplot() +\n  stat_function(fun = dnorm, args = list(mean = 0, sd = 10),\n                geom = \"area\", fill = \"grey80\", color = \"black\") +\n  xlim(-35, 35) +\n  labs(title = \"Vague prior\", subtitle = \"Normal(mean = 0, sd = 10)\",\n       caption = \"Surely θ is in there *somewhere*\")\n\nplot_informative | plot_vague\n```\n\nFor the sake of this example, we'll use a vague prior.\n\nHere's how to officially do Bayesian analysis with **brms** and incorporate prior information about $\\theta$. Again, the syntax is super similar to `lm()`, just with some extra bits about the prior and the MCMC settings:\n\n```{r load-bayes-stuff, warning=FALSE, message=FALSE}\nlibrary(brms)         # For Bayesian regression with brm()\nlibrary(broom.mixed)  # For tidy() and glance() with brms-based models\nlibrary(tidybayes)    # For extracting posterior draws\nlibrary(ggdist)       # For making pretty posterior plots\n```\n\n```{r actual-brms-model, cache=TRUE, results='hide'}\n# bf() stands for \"bayes formula\"; you technically don't need to use it, but it \n# makes life easier for more complex models, so it's good practice even when \n# using a simple formula like the one here\n#\n# This will take a little bit of time to run. Here's what it's actually doing:\n#\n# 1. Translate this R code to Stan (a specific language for doing Bayesian stuff with MCMC)\n# 2. Compile the Stan code to faster-running C++ code\n# 3. Actually do the MCMC sampling\n\n# Set the prior for the weekend coefficient\n# Use get_priors() to see all the other default priors\npriors <- c(\n  prior(normal(0, 10), class = \"b\", coef = \"WeekendTRUE\")\n)\n\n# Run the model!\nmodel_bayes <- brm(bf(inspection_score ~ Weekend + NumberofLocations + Year),\n                   data = inspections,\n                   prior = priors,\n                   chains = 4, iter = 2000, cores = 4, seed = 1234)\n```\n\nPhew. That took a while to run, but it ran! Now we can check the results:\n\n```{r warning=FALSE}\ntidy(model_bayes, conf.int = TRUE)\n```\n\n```{r warning=FALSE, include=FALSE}\nresults <- tidy(model_bayes, conf.int = TRUE) %>% \n  filter(effect == \"fixed\") %>% \n  mutate(across(c(estimate, conf.low, conf.high), \n                list(nice = ~as.character(round(., 2))))) %>% \n  split(.$term)\n```\n\nOur estimate for the weekend boost, or $\\hat{\\theta}$, is `r results$WeekendTRUE$estimate_nice`, which is basically the same as the frequentist estimate we found before. We have an interval too, but it's not a confidence interval—it's a credible interval. Instead of telling us about the range of the confidence interval net, this credible interval tells us the probability that $\\hat{\\theta}$ falls in that range. It's essentially the probability of the actual value, not the probability of the range. Based on this, there's a 95% chance that—given the data we have—the weekend score boost ($\\hat{\\theta}$) is between `r results$WeekendTRUE$conf.low_nice` and `r results$WeekendTRUE$conf.high_nice`.\n\nWe can visualize this posterior distribution to see more information than we could with our frequentist estimate. Remember, our simulation estimated thousands of possible coefficients for `WeekendTRUE`, and each of them are equally likely. The value that we see in `tidy()` is the median of all these simulated coefficients, or draws. We can see a few of them here:\n\n```{r}\nmodel_bayes %>%\n  spread_draws(b_WeekendTRUE) %>%\n  head(10)\n```\n\nSometimes the weekend boost is 1.2, sometimes 1.7, sometimes 1.3, etc. There's a lot of variation in there. We can plot all these simulated coefficients to see where they mostly cluster:\n\n```{r weekend-posterior-halfeye}\nweekend_draws <- model_bayes %>%\n  spread_draws(b_WeekendTRUE)\n\nggplot(weekend_draws, aes(x = b_WeekendTRUE)) +\n  stat_halfeye() +\n  labs(caption = \"Point shows median value;\\nthick black bar shows 66% credible interval;\\nthin black bar shows 95% credible interval\")\n```\n\nThe weekend point boost $\\hat{\\theta}$ is mostly clustered around 1–2, and 95% of those draws are between `r results$WeekendTRUE$conf.low_nice` and `r results$WeekendTRUE$conf.high_nice`. We're thus 95% sure that the actual weekend point boost is between `r results$WeekendTRUE$conf.low_nice` and `r results$WeekendTRUE$conf.high_nice` with a median of `r results$WeekendTRUE$estimate_nice`. \n\nWe can also look at this distribution a slightly different way by collapsing all those posterior draws into 100 possible values. Each of these dots is equally likely, and the true value of $\\theta$ could be any of them, but again, most are clustered around `r results$WeekendTRUE$estimate_nice`:\n\n```{r weekend-posterior-dots}\nggplot(weekend_draws, aes(x = b_WeekendTRUE)) +\n  stat_dotsinterval(quantiles = 100) +\n  labs(caption = \"Point shows median value;\\nthick black bar shows 66% credible interval;\\nthin black bar shows 95% credible interval\")\n```\n\n## General summary of intervals\n\nSo, we've seen two different philosophies for quantifying uncertainty with confidence intervals and credible intervals. Here's a general overview of the two approaches and how you can interpret them:\n\n```{r summary-table, echo=FALSE, warning=FALSE, message=FALSE}\nlibrary(kableExtra)\n\ntribble(\n  ~` `, ~Frequentism, ~Bayesianism,\n  \"Approach\", \"\\\\(P(\\\\text{Data} \\\\mid \\\\theta)\\\\)\", \"\\\\(P(\\\\theta \\\\mid \\\\text{Data})\\\\)\",\n  \"\", \"\\\\(\\\\theta\\\\) is a fixed single value; data is variable and can be repeatedly sampled\", \"\\\\(\\\\theta\\\\) is variable and has uncertainty; data is fixed (you only have one sample)\",\n  \"How to do it in R\", \"<code>lm(...)</code>\", \"<code>library(brms)</code><br><code>brm(...)</code>\",\n  \"Name\", \"Confidence interval\", \"Credible interval (or posterior interval)\",\n  \"Intuition\", \"Probability of the range\", \"Probability of the actual value\",\n  \"Interpretation template\", \"There's a 95% probability that this range contains the true value of \\\\(\\\\theta\\\\)\", \"There's a 95% probability that the true value of \\\\(\\\\theta\\\\) falls in this range.\",\n  \"\", \"Few people naturally think like this\", \"People <em>do</em> naturally think like this\"\n) %>% \n  kbl(escape = FALSE) %>% \n  kable_styling(full_width = FALSE, position = \"center\")\n```\n\n## Two ways of making decisions with posterior distributions\n\nIn the world of frequentism, we're interested in whether coefficients are statistically different from 0 in a null world where there's no effect. We rely on *p*-values to see the probability of seeing an estimate at least as large as what we've calculated in a hypothetical world where that estimate is actually 0. This is a really non-intuitive way of thinking about the world (imaginary null worlds?!), so everyone always misinterprets *p*-values.\n\nRemember what you read in [Imbens's article](https://doi.org/10.1257/jep.35.3.157) though—in real life, very few people care about whether a coefficient is significantly different from a hypothetical null. Instead, people want to know how certain you are of the estimate and what it means practically. Is it for sure a positive effect, or could it maybe be zero or maybe be negative? Significance stars can't tell us much about those questions, but posterior Bayesian intervals can.\n\n### Probability of direction\n\nOne question we can answer with Bayesian results is \"How certain are we that this estimate is positive (or negative)?\" Are we sure the weekend scores are higher on average, or could they sometimes be negative? Are we sure that the average treatment effect of your program decreases poverty, or could it maybe have a positive effect instead?\n\nTo figure this out, we can calculate something called the [\"probability of direction,\"](https://easystats.github.io/bayestestR/articles/probability_of_direction.html) or the proportion of posterior draws that are above (or below) some arbitrary number. For instance, what's the probability that the weekend boost is positive (or greater than 0)?\n\n```{r}\n# Find the proportion of posterior draws that are bigger than 0\nweekend_draws %>% \n  summarize(prop_greater_0 = sum(b_WeekendTRUE > 0) / n())\n```\n\nWhoa. 99.9% of the posterior draws for the weekend boost are greater than 0, meaning that there's a 99.9% chance that the coefficient is positive, given the data we have. \n\nThe neat thing about the probability of direction is that we can choose whatever value we want as the threshold. Let's say the state health director wants to know if weekend scores are higher than weekday scores, but she's fine with just a little boost (weekends are nice! inspectors are happier!). Pretend that she thinks an average difference of 1 or lower isn't a big concern, but seeing a difference greater than 1 is a signal that weekend inspectors are maybe being too lenient. We can use 1 as our threshold instead:\n\n```{r}\n# Find the proportion of posterior draws that are bigger than 1\nweekend_draws %>% \n  summarize(prop_greater_0 = sum(b_WeekendTRUE > 1) / n())\n```\n\nBased on this, 84% of the draws are higher than 1, so there's an 84% chance that the actual $\\theta$ is greater than 1. Notice how there's no discussion of significance here—no alpha thresholds, no stars, no null worlds. We just have a probability that $\\hat{\\theta}$ is above 1. We can even visualize it. Everything to the right of that vertical line at 1 is \"significant\" (but not significant with null worlds and stars).\n\n```{r plot-pd}\nggplot(weekend_draws, aes(x = b_WeekendTRUE)) +\n  stat_halfeye(aes(fill_ramp = stat(x > 1)), fill = \"red\") +\n  scale_fill_ramp_discrete(from = \"darkred\", guide = \"none\") +\n  geom_vline(xintercept = 1) +\n  labs(caption = \"Point shows median value;\\nthick black bar shows 66% credible interval;\\nthin black bar shows 95% credible interval\")\n```\n\nShould the state health director be concerned? Probably. There's an 84% chance that weekend inspection scores are at least 1 point higher than weekday scores, on average, given the data we have.\n\n### Region of practical equivalence (ROPE)\n\nLooking at the probability of direction is helpful if you are concerned whether an effect is positive or negative (i.e. greater or less than 0), but it's also a little weird to think about because we're testing if something is greater or less than some specific single number. In our example of the health director, we pretended that she cared whether the average weekend score was 1 point higher, but that's arbitrary. \n\nAnother approach is that we can think of a range of $\\theta$ where there's practically no effect. Think of this as a \"dead zone\" of sorts. If $\\hat{\\theta}$ is 0, we know there's no effect. If $\\hat{\\theta}$ is something tiny like 0.2 or -0.3, we probably don't actually care—that's a tiny amount and could just be because of measurement error. It's not anything really actionable. If $\\hat{\\theta}$ is big like 1.3 or -2.4 or whatever, then we have cause to worry, but if the estimate is in the \"dead zone\" (however we want to define it), then we shouldn't really care or worry. \n\nThe official Bayesian term for this \"dead zone\" is [the *region of practical equivalence* (ROPE)](https://easystats.github.io/bayestestR/articles/region_of_practical_equivalence.html). There are lots of ways to determine this dead zone—you can base it on experience with the phenomenon (e.g., if you're the health director and know a lot about inspection scores, you know what kind of score ranges matter), or you can base it on the data you have (e.g., `-0.1 * sd(outcome)` to `0.1 * sd(outcome)`). \n\nFor this example, let's pretend that the health director tells you that any effect between −0.5 and 0.5 doesn't matter—for her, those kind of values would be the same as 0. Now that we have a dead zone or ROPE, we can calculate the proportion of coefficient draws that fall outside of that ROPE:\n\n```{r}\n# Find the proportion of posterior draws that are bigger than 0.5 or less than -0.5\nweekend_draws %>% \n  summarize(prop_outside_rope = 1 - sum(b_WeekendTRUE >= -0.5 & b_WeekendTRUE <= 0.5) / n())\n```\n\n```{r plot-rope}\nggplot(weekend_draws, aes(x = b_WeekendTRUE)) +\n  stat_halfeye(aes(fill_ramp = stat(x >= 0.5 | x <= -0.5)), fill = \"red\") +\n  scale_fill_ramp_discrete(from = \"darkred\", guide = \"none\") +\n  annotate(geom = \"rect\", xmin = -0.5, xmax = 0.5, ymin = -Inf, ymax = Inf, fill = \"purple\", alpha = 0.3) +\n  annotate(geom = \"label\", x = 0, y = 0.75, label = \"ROPE\\n(dead zone)\") +\n  labs(caption = \"Point shows median value;\\nthick black bar shows 66% credible interval;\\nthin black bar shows 95% credible interval\")\n```\n\nGiven this data, 98% of the posterior distribution of the weekend boost is outside of the ROPE, or dead zone, so we can consider this to be \"significant\" (again, this is a tricky word because it has nothing to do with null worlds and stars!).\n\nThere are some debates over what you should check with the ROPE. Some people say that you should look at how much of the 95% credible interval is inside the dead zone; other say you should look at how much of the entire distribution is inside the dead zone. We just did the latter, with the whole distribution. If we want to see how much of the area within the credible interval is inside the dead zone, we can change the code a little to filter those observations out:\n\n```{r}\n# Extract the 95% confidence interval range\nweekend_cred_int <- weekend_draws %>% \n  median_hdi()\nweekend_cred_int$.lower\n\n# Find the proportion of posterior draws that are bigger than 0.5 or less than \n# -0.5, but only look inside the 95% credible interval\nweekend_draws %>% \n  # Only look inside the credible interval\n  filter(b_WeekendTRUE >= weekend_cred_int$.lower & b_WeekendTRUE <= weekend_cred_int$.upper) %>% \n  summarize(prop_outside_rope = 1 - sum(b_WeekendTRUE >= -0.5 & b_WeekendTRUE <= 0.5) / n())\n```\n\nIf we look only at the 95% credible interval of the posterior, there's a 0% chance that any of those estimated coefficients are in the dead zone / ROPE. There's a 100% chance that the credible interval doesn't touch the ROPE. You can see this visually too—look at the figure above with the purple ROPE. The thin black bar that shows the 95% credible interval doesn't show up in the purple area.\n\nWhich approach is better—using full distribution or just using the credible interval? Who knows. That's up to you.\n\nFinally, here we decided on the ROPE kind of arbitrarily as −0.5 to 0.5, but there are more systematic ways of doing it. [One common and standard suggestion](https://easystats.github.io/bayestestR/articles/region_of_practical_equivalence.html#how-to-define-the-rope-range-) is to use −0.1 and 0.1 times the standard deviation of the outcome variable:\n\n```{r}\nc(-0.1, 0.1) * sd(inspections$inspection_score)\n```\n\nBased on this approach, our ROPE/dead zone should be −0.63 to 0.63. Let's see how that looks:\n\n```{r}\n# Find the proportion of posterior draws that are bigger than 0.5 or less than \n# -0.5, but only look inside the 95% credible interval\nweekend_draws %>% \n  # Only look inside the credible interval\n  filter(b_WeekendTRUE >= weekend_cred_int$.lower & b_WeekendTRUE <= weekend_cred_int$.upper) %>% \n  summarize(prop_outside_rope = 1 - sum(b_WeekendTRUE >= -0.63 & b_WeekendTRUE <= 0.63) / n())\n```\n\n```{r plot-rope-sd}\nggplot(weekend_draws, aes(x = b_WeekendTRUE)) +\n  stat_halfeye(aes(fill_ramp = stat(x >= 0.63 | x <= -0.63)), fill = \"red\") +\n  scale_fill_ramp_discrete(from = \"darkred\", guide = \"none\") +\n  annotate(geom = \"rect\", xmin = -0.63, xmax = 0.63, ymin = -Inf, ymax = Inf, fill = \"purple\", alpha = 0.3) +\n  annotate(geom = \"label\", x = 0, y = 0.75, label = \"ROPE\\n(dead zone)\") +\n  labs(caption = \"Point shows median value;\\nthick black bar shows 66% credible interval;\\nthin black bar shows 95% credible interval\")\n```\n\nThis changes our results just a tiny bit. 97% of the full posterior distribution and 99.7% of the credible interval falls outside this ROPE. Neat. We can thus safely say that the weekend effect, or our estimate of $\\theta$ is definitely practical and substantial (or \"significant\" if we want to play with that language).\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"highlight-style":"monokai","output-file":"bayes.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","bibliography":["../files/bib/references.bib"],"csl":"../files/bib/chicago-author-date.csl","description-meta":"Use modern statistical and data scientific tools to measure causal effects and evaluate public policy","_quarto-vars":{"author":"Andrew Weiss","instructor":{"name":"Dr. Jacob Wallace","name_no_title":"Jacob Wallace","email":"jacob.wallace@yale.edu","url":"https://www.jacobwswallace.com/home","twitter":"jwswallace","github":"jacobwittwallace","office":"60 College St","contact_policy":"E-mail and Slack are the best ways to get in contact with me. I will try to respond to all course-related e-mails and Slack messages within 24 hours (*really*), but also remember that life can be busy and chaotic for everyone (including me!), so if I don't respond right away, don't worry!","appointment_url":"https://calendly.com/andrewheiss/"},"course":{"number":"HPM 587","semester":"Spring 2024","days":"Thursdays","time":"4:30–7:00 PM","location":"Winslow Auditorium, LEPH","dates":"January–April 30, 2024","github":"https://github.com/jacobwittwallace","url":"https://kpratt02.github.io/","copyright_year":"2022","slack":"https://gsuevalf2022.slack.com"},"university":{"name":"Yale University","url":"https://www.yale.edu"},"school":{"name":"Yale School of Public Health","url":"https://ysph.yale.edu/"}},"theme":["litera","../html/custom.scss"],"title":"Bayesian statistics resources"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}